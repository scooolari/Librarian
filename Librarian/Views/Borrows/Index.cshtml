@{
    ViewBag.Title = "Borrows list";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Borrows</h2>

@Styles.Render("~/Content/kedno")
@Scripts.Render("~/bundles/ajax")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/kendo")

@(Html.Kendo().Grid<Models.Borrows.BorrowViewModel>()
        .Name("borrowsGrid")
        .Columns(columns =>
        {
            columns.Bound(c => c.UserName);
            columns.Bound(c => c.BookTitle);
            columns.Bound(c => c.FromDate).Format("{0: dd.MM.yyyy}");
            columns.Bound(c => c.ToDate).Format("{0: dd.MM.yyyy}");
            columns.Bound(c => c.IsReturnedString).Title("Returned");
            columns.Bound(c => c.BorrowId)
                .Title("")
                .ClientTemplate("<a href='" + Url.Action("ReturnBook", "Borrows", new { borrowId = "#=BorrowId#" }) + "'># if (!IsReturned) { # Return book # } #</a>");
        })
        .ToolBar(toolbar => toolbar.Template("<button onclick='OpenAddBorrowWindow()'>Add borrow</button> "))
        .Scrollable()
        .Groupable()
        .Sortable()
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetBorrowsList", "Borrows"))
            .PageSize(20)
            .Model(model => model.Id(a => a.BorrowId))
        )
)

<h2>Users with books</h2>

@(Html.Kendo().Grid<Models.Borrows.UserWithBooksViewModel>()
        .Name("usersWithBooksGrid")
        .Columns(columns =>
        {
            columns.Bound(c => c.UserName);
            columns.Bound(c => c.BooksBorrowed);
        })
        .ToolBar(toolbar => toolbar.Template("<button onclick='ViewUserBooks()'>View books borrowed by user</button> "))
        .Scrollable()
        .Groupable()
        .Sortable()
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetUsersWithBooksList", "Borrows"))
            .PageSize(20)
            .Model(model => model.Id(a => a.UserId))
        )
        .Selectable(a => a.Type(GridSelectionType.Row))
)

@(Html.Kendo().Window()
              .Name("AddBorrowWindow")
              .Title("Add borrow")
              .Visible(false)
              .Modal(false)
              .Actions(a => { })
              .Draggable()
              .Width(500)
              .Height(600)
)

<script type="text/javascript">

    var actualListNumber = 1;
    var previousListNumber = 0;
    var lastSelectedOption = null;

    function OpenAddBorrowWindow() {
        var win = $("#AddBorrowWindow");
        var winData = $("#AddBorrowWindow").data("kendoWindow");
        win.kendoWindow({
            content: "/Borrows/AddBorrow"
        });
        winData.center().open();
    }

    function addBooksList(divname) {
        var previusId = "BooksList" + (actualListNumber);
        var previusBooksList = document.getElementById(previusId);
        if (previusBooksList == null) {
            actualListNumber = 1;
            previousListNumber = 0;
            previusId = "BooksList" + (actualListNumber);
            previusBooksList = document.getElementById(previusId);
        }
        var booksListOptions = previusBooksList.options;

        if (booksListOptions.length > 1) {
            previousListNumber = actualListNumber;
            actualListNumber = actualListNumber + 1;
            var actualId = "BooksList" + actualListNumber;
            var newDiv = document.createElement('div');
            var html = "<label><b>Book " + actualListNumber + " </b></label><select id='" + actualId + "' onfocus=\"focusBooksList('" + actualId + "')\" onchange=\"changeBooksList('" + actualId + "')\" >";
            for (var i = 0, len = booksListOptions.length; i < len; i++) {
                if (i != previusBooksList.selectedIndex)
                    html += "<option value='" + booksListOptions[i].value + "'>" + booksListOptions[i].text + "</option>";
            }
            html += "</select>";
            html += "<button id='buttonBooksList" + actualListNumber + "' onclick=\"removeBooksList('divBooksList" + actualListNumber + "');\">Remove</button>";
            newDiv.innerHTML = html;
            newDiv.id = 'divBooksList' + actualListNumber;
            document.getElementById(divname).appendChild(newDiv);
            var addedSelect = document.getElementById(actualId);
            removeOptionFromListsBefore(addedSelect.options[addedSelect.selectedIndex]);
            sortOptions(actualId);
        }
    }

    function sortOptions(selectToSortId) {
        var sel = $('#' + selectToSortId);
        var selected = sel.val();
        var opts_list = sel.find('option');
        opts_list.sort(function (a, b) { return $(a).text() > $(b).text() ? 1 : -1; });
        sel.html('').append(opts_list);
        sel.val(selected);
    }

    function addOptionToAllLists(addedOption, skippedListNumber) {
        // add selected option to all existing lists
        for (var i = 1; i <= actualListNumber; i++) {
            if (i == skippedListNumber)
                continue;
            var actualId = 'BooksList' + i;
            var selectListItems = document.getElementById(actualId);
            if (selectListItems) {
                var option = document.createElement("option");
                option.text = addedOption.text;
                option.value = addedOption.value;
                selectListItems.options.add(option);
                sortOptions(actualId);
            }
        }
    }

    function removeOptionFromListsBefore(removedOption) {
        // remove selected option from lists before added list
        for (var i = 1; i < actualListNumber; i++) {
            $("#BooksList" + i + " option[value='" + removedOption.value + "']").remove();
        }
    }

    function removeOptionFromAllLists(removedOption, skippedListNumber) {
        // remove selected option from all existing lists beside one
        for (var i = 1; i <= actualListNumber; i++) {
            if (i == skippedListNumber)
                continue;
            $("#BooksList" + i + " option[value='" + removedOption.value + "']").remove();
        }
    }

    function focusBooksList(booksListId) {
        var selectedBooksList = document.getElementById(booksListId);
        lastSelectedOption = selectedBooksList.options[selectedBooksList.selectedIndex];
    }

    function changeBooksList(booksListId) {
        var selectedBooksList = document.getElementById(booksListId);
        var actualSelectedOption = selectedBooksList.options[selectedBooksList.selectedIndex];
        var selectedListNumber = parseInt(booksListId.replace('BooksList', ''));
        addOptionToAllLists(lastSelectedOption, selectedListNumber);
        removeOptionFromAllLists(actualSelectedOption, selectedListNumber);
    }

    function removeBooksList(divId) {
        var removedListNumber = parseInt(divId.replace('divBooksList', ''));
        var myDiv = document.getElementById(divId);
        var removedSelect = myDiv.getElementsByTagName('select')[0];
        var selectedRemoveItem = removedSelect.options[removedSelect.selectedIndex];
        addOptionToAllLists(selectedRemoveItem);
        // update global ListNumbers (if needed)
        if (removedListNumber == actualListNumber) {
            var previusId = "BooksList" + (previousListNumber);
            var previusBooksList = document.getElementById(previusId);
            actualListNumber = previousListNumber;
            previousListNumber = lookForActualId(actualListNumber);
        }
        else if (removedListNumber == previousListNumber) {
            previousListNumber = lookForPreviousId(previousListNumber);
        }
        myDiv.parentNode.removeChild(myDiv);
    }

    function lookForActualId(startingListNumber) {
        for (var i = startingListNumber - 1; i >= 0; i++) {
            var existsBooksList = document.getElementById('BooksList' + i);
            if (existsBooksList) {
                return i;
            }
        }
        return 1;
    }

    function lookForPreviousId(startingListNumber) {
        for (var i = startingListNumber - 1; i >= 0; i++) {
            var existsBooksList = document.getElementById('BooksList' + i);
            if (existsBooksList) {
                return i;
            }
        }
        return 0;
    }

    function SaveAndSubmit() {
        var booksIdList = [];
        for (var i = 1; i <= actualListNumber; i++) {
            var existsBooksList = document.getElementById('BooksList' + i);
            if (existsBooksList) {
                booksIdList.push(existsBooksList.options[existsBooksList.selectedIndex].value);
            }
        }
        var usersIdList = document.getElementById('UsersList');
        var userId = usersIdList.options[usersIdList.selectedIndex].value;
        $.ajax({ 
                type: "POST",
                url: '@Url.Action("AddBorrow","Borrows")',
                datatype: "json",
            traditional: true,
            data: { 'ChosenBooks': booksIdList, 'SelectedUserId': userId },
            success: function (e) {
                if (e.IsValid) {
                    $('#borrowsGrid').data('kendoGrid').dataSource.read();
                    $('#borrowsGrid').data('kendoGrid').refresh();
                    $('#usersWithBooksGrid').data('kendoGrid').dataSource.read();
                    $('#usersWithBooksGrid').data('kendoGrid').refresh();
                    $("#AddBorrowWindow").data("kendoWindow").close();
                }
            }
        });
    }

    function Close() {
        $("#AddBorrowWindow").data("kendoWindow").close();
    }

    function ViewUserBooks() {
        var grid = $('#usersWithBooksGrid').data("kendoGrid");
        var selectedRow = grid.select();
        if (selectedRow.index() >= 0) {
            window.location.href = '@Url.Action("UserBooks", "Borrows")?userId=' + grid.dataItem(selectedRow).UserId;
        }
    }

</script>