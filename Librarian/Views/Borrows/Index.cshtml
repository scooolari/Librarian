@{
    ViewBag.Title = "Borrows list";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Borrows</h2>

@Styles.Render("~/Content/kedno")
@Scripts.Render("~/bundles/ajax")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/kendo")

@(Html.Kendo().Grid<Models.Borrows.BorrowViewModel>()
        .Name("borrowsGrid")
        .Columns(columns =>
        {
            columns.Bound(c => c.UserId).Hidden();
            columns.Bound(c => c.UserName);
            columns.Bound(c => c.BookId).Hidden();
            columns.Bound(c => c.BookTitle);
            columns.Bound(c => c.FromDate).Format("{0: dd.MM.yyyy}");
            columns.Bound(c => c.ToDate).Format("{0: dd.MM.yyyy}");
            columns.Bound(c => c.IsReturnedString).Title("Returned");
        })
        .ToolBar(toolbar => toolbar.Template("<button onclick='OpenAddBorrowWindow()'>Add borrow</button> "))
        .Scrollable()
        .Groupable()
        .Sortable()
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetBorrowsList", "Borrows"))
            .PageSize(20)
            .Model(model => model.Id(a => a.BorrowId))
        )
)

@(Html.Kendo().Window()
              .Name("AddBorrowWindow")
              .Title("Add borrow")
              .Visible(false)
              .Modal(false)
              .Actions(a => { })
              .Draggable()
              .Width(600)
              .Height(800)
)

<script type="text/javascript">

    var actualListNumber = 1;
    var previousListNumber = 0;

    function OpenAddBorrowWindow() {
        var win = $("#AddBorrowWindow");
        var winData = $("#AddBorrowWindow").data("kendoWindow");
        win.kendoWindow({
            content: "/Borrows/AddBorrow"
        });
        winData.center().open();
    }

    function addBooksList(divname) {
        previousListNumber = actualListNumber;
        actualListNumber = actualListNumber + 1;
        var previusId = "BooksList" + (previousListNumber);
        var actualId = "BooksList" + actualListNumber;
        var newDiv = document.createElement('div');
        var html = "<label><b>Book " + actualListNumber + " </b></label><select id='" + actualId + "'>";
        var previusBooksList = document.getElementById(previusId);
        var booksListOptions = previusBooksList.options;
        for (var i = 0, len = booksListOptions.length; i < len; i++) {
            if (i != previusBooksList.selectedIndex)
                html += "<option value='" + booksListOptions[i].value + "'>" + booksListOptions[i].text + "</option>";
        }
        html += "</select>";
        html += "<button id='buttonBooksList" + actualListNumber + "' onclick=\"removeBooksList('divBooksList" + actualListNumber + "');\">Remove</button>";
        newDiv.innerHTML = html;
        newDiv.id = 'divBooksList' + actualListNumber;
        document.getElementById(divname).appendChild(newDiv);
        previusBooksList.disabled = true;
    }

    function removeBooksList(divId) {
        var removedListNumber = parseInt(divId.replace('divBooksList', ''));
        var myDiv = document.getElementById(divId);
        var removedSelect = myDiv.getElementsByTagName('select')[0];
        var selectedRemoveItem = removedSelect.options[removedSelect.selectedIndex];
        // add selected option from removed select to others selects
        for (var i = removedListNumber + 1, len = actualListNumber; i <= len; i++) {
            var selectListItems = document.getElementById('BooksList' + i);
            if (selectListItems) {
                var option = document.createElement("option");
                option.text = selectedRemoveItem.text;
                option.value = selectedRemoveItem.value;
                selectListItems.options.add(option);
            }
        }
        // update global ListNumbers (if needed)
        if (removedListNumber == actualListNumber) {
            var previusId = "BooksList" + (previousListNumber);
            var previusBooksList = document.getElementById(previusId);
            previusBooksList.disabled = false;
            actualListNumber = previousListNumber;
            previousListNumber = lookForPreviousId(actualListNumber);
        }
        else if (removedListNumber == previousListNumber) {
            previousListNumber = lookForPreviousId(previousListNumber);
        }
        myDiv.parentNode.removeChild(myDiv);
    }

    function lookForPreviousId(startingListNumber) {
        for (var i = startingListNumber - 1; i >= 0; i++) {
            var existsBooksList = document.getElementById('BooksList' + i);
            if (existsBooksList) {
                return i;
            }
        }
        return 1;
    }

    function SaveAndSubmit() {
        var booksIdList = [];
        for (var i = 1; i <= actualListNumber; i++) {
            var existsBooksList = document.getElementById('BooksList' + i);
            if (existsBooksList) {
                booksIdList.push(existsBooksList.options[existsBooksList.selectedIndex].value);
            }
        }
        var usersIdList = document.getElementById('UsersList');
        var userId = usersIdList.options[usersIdList.selectedIndex].value;
        $.ajax({ 
                type: "POST",
                url: '@Url.Action("AddBorrow","Borrows")',
                datatype: "json",
            traditional: true,
            data: { 'ChosenBooks': booksIdList, 'SelectedUserId': userId },
            success: function (result) {
                window.location.href = result.Url;
            }
        });
    }

</script>